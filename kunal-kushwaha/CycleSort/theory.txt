when you are given numbers from range 1 to N, -> use Cyclic sort
eg.
- find missing number where numbers are given from 1 to N

in cases like this, the value of index = value of number - 1 when sorted

eg. let's say we're given numbers from 1 to 6 and when sorted, 
they'll look like this

index : 0 1 2 3 4 5     here, index = value - 1
value : 1 2 3 4 5 6  

How this works ?

we check in unsorted array that whether the 0th item is at the correct index?
if no then swap with the correct index item.

pass 0 - is item at 0th index is at the correct index? yes -> move forward | no -> swap
ans : swap
before --                   after --
index : 0 1 2 3 4           index : 0 1 2 3 4
value : 5 3 4 1 2           value : 2 3 4 1 5  //swapped arr[0] with correct index

pass 1 - is item at 0th index at the correct index? 
ans : swap
before --                   after --
index : 0 1 2 3 4           index : 0 1 2 3 4           
value : 2 3 4 1 5           value : 3 2 4 1 5

pass 2 - is item at 0th index at the correct index? 
ans : swap
before --                   after --
index : 0 1 2 3 4           index : 0 1 2 3 4           
value : 3 2 4 1 5           value : 4 2 3 1 5

pass 3 - is item at 0th index at the correct index? 
ans : swap
before --                   after --
index : 0 1 2 3 4           index : 0 1 2 3 4           
value : 4 2 3 1 5           value : 1 2 3 4 5

pass 4 - is item at 0th index at the correct index? 
ans : yes -> move forward

is item at 1st index at the correct index?
yes -> move forward

is item at 2nd index at correct index?
yes -> move forward
.
.
.
array is sorted
return array

TIME COMPLEXITY:
worst - O(n)
best - O(c) // c is contstant

